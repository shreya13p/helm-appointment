name: Build and Push Docker images to ECR

on:
  push:
    branches: [ "main" ]
    paths:
      - 'frontend/**'
      - 'backend/**'
      - 'deployment-files/**'
  workflow_dispatch: 

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v4
      with:
        submodules: true  # This is required to checkout submodules
        token: ${{ secrets.ACCESS_TOKEN }}  # Using the personal access token for authentication

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push frontend image to Amazon ECR
      id: build-image-frontend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: "latest"
        ECR_REPOSITORY_FRONTEND: ${{ vars.ECR_REPOSITORY_FRONTEND }}
      run: |
        cd deployment-files/frontend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push backend image to Amazon ECR
      id: build-image-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: "latest"
        ECR_REPOSITORY_BACKEND: ${{ vars.ECR_REPOSITORY_BACKEND }}
      run: |
        cd deployment-files/backend
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update kube config
      env:
        AWS_REGION: ${{ vars.AWS_REGION }}
        EKS_CLUSTER_NAME: ${{ vars.EKS_CLUSTER_NAME }}
      run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION

    - name: Deploy MongoDB Helm Chart
      env:
        MONGO_REPLICAS: 3  # Set desired MongoDB replica count
        MONGO_STORAGE: 5Gi # Storage size for MongoDB
        MONGO_USER: admin
        MONGO_PASSWORD: securepassword123
        MONGO_DATABASE: app_db
      run: |
        cd deployment-files/helm-mango
        helm upgrade --install helm-mango . \
          --set replicaCount=$MONGO_REPLICAS \
          --set persistence.size=$MONGO_STORAGE \
          --set auth.username=$MONGO_USER \
          --set auth.password=$MONGO_PASSWORD \
          --set auth.database=$MONGO_DATABASE

    - name: Deploy Backend Helm Chart
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: "latest"
      run: |
        cd deployment-files/backend
        helm upgrade --install app-backend . \
          --set image.repository=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY_BACKEND }} \
          --set image.tag=$IMAGE_TAG

    - name: Deploy Frontend Helm Chart
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: "latest"
      run: |
        cd deployment-files/frontend
        helm upgrade --install app-frontend . \
          --set image.repository=$ECR_REGISTRY/${{ vars.ECR_REPOSITORY_FRONTEND }} \
          --set image.tag=$IMAGE_TAG
